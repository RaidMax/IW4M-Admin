@using SharedLibraryCore.Interfaces
@using Data.Models
@using Data.Models.Client
@model SharedLibraryCore.Dtos.PlayerInfo
@{
    var match = System.Text.RegularExpressions.Regex.Match(Model.Name.ToUpper(), "[A-Z]").Value;
    var shortCode = match == string.Empty ? "?" : match;
    var gravatarUrl = Model.Meta.FirstOrDefault(m => m.Key == "GravatarEmail")?.Value;
    var isFlagged = Model.LevelInt == (int)EFClient.Permission.Flagged;
    var isPermBanned = Model.LevelInt == (int)EFClient.Permission.Banned;
    var isTempBanned = Model.ActivePenalty?.Type == EFPenalty.PenaltyType.TempBan;
    var translationKey = $"WEBFRONT_PROFILE_{Model.ActivePenalty?.Type.ToString().ToUpper()}_INFO";
    var ignoredMetaTypes = new[] { MetaType.Information, MetaType.Other, MetaType.QuickMessage };
}

<div id="profile_wrapper" class="pb-3 row d-flex flex-column flex-lg-row">
    <!-- Initial/Avatar Column -->
    <div id="profile_avatar" class="d-block d-lg-inline-flex flex-column mr-auto ml-auto mr-lg-0 ml-lg-0 justify-content-center text-center level-bgcolor-@(!ViewBag.Authorized && ViewBag.EnablePrivilegedUserPrivacy ? "0" : Model.LevelInt.ToString()) @(isTempBanned ? "penalties-bgcolor-tempban" : "")" style="background-image:url('@string.Format("https://gravatar.com/avatar/{0}?size=168&default=blank&rating=pg", gravatarUrl)')">
        @if (string.IsNullOrEmpty(gravatarUrl))
        {
            <span class="profile-shortcode">@shortCode</span>
        }
    </div>
    <!-- Name/Level Column -->
    <div class="w-50 d-block d-lg-inline-flex flex-column flex-fill text-center text-lg-left pb-3 pb-lg-0 pt-3 pt-lg-0 pl-3 pr-3 ml-auto mr-auto" style="overflow-wrap: anywhere">
        <div class="mt-n2 d-block d-lg-inline-flex @(ViewBag.Authorized ? "" : "flex-fill")">
            <div id="profile_name" class="client-name h1 mb-0">
                <color-code value="@Model.Name"></color-code>
            </div>
            @if (ViewBag.Authorized)
            {
                <div id="profile_aliases_btn" class="oi oi-caret-bottom h3 ml-0 ml-lg-2 mb-0 pt-lg-2 mt-lg-1"></div>
            }
        </div>

        @if (ViewBag.Authorized)
        {
            <div class="d-flex flex-row justify-content-start flex-fill flex-column flex-lg-row mr-lg-2 mb-2 mb-md-0">
                @if (ViewBag.User.Level >= SharedLibraryCore.Database.Models.EFClient.Permission.Administrator)
                {
                    <div class="ip-lookup-profile align-self-center mr-0 mr-lg-2 ml-lg-n1" data-ip="@Model.IPAddress"></div>
                }
                <div id="ip_lookup_country" class="h4 mb-2 mb-lg-0 align-self-center text-muted"></div>
            </div>

            <div id="profile_aliases" class="text-muted pt-0 pt-lg-2 pb-2">
                @foreach (var linked in Model.LinkedAccounts)
                {
                    <div>
                        @Html.ActionLink(linked.Value.ToString("X"), "ProfileAsync", "Client", new { id = linked.Key }, new { @class = "link-inverse" })
                    </div>
                }
                @foreach (var alias in Model.Aliases)
                {
                    <div>
                        <color-code value="@alias"></color-code>
                    </div>
                }

                @foreach (var ip in Model.IPs)
                {
                    if (ViewBag.Authorized && ViewBag.User.Level >= SharedLibraryCore.Database.Models.EFClient.Permission.Administrator)
                    {
                        <div>
                            <a class="ip-locate-link" href="#" data-ip="@ip">@ip</a>
                        </div>
                    }
                }
            </div>
        }
        @if (Model.ActivePenalty != null && (Model.ActivePenalty.Type != EFPenalty.PenaltyType.Flag || ViewBag.Authorized))
        {
            <div class="font-weight-bold h4 mb-0 penalties-color-@Model.ActivePenalty.Type.ToString().ToLower()">
                @foreach (var result in Utilities.SplitTranslationTokens(translationKey))
                {
                    switch (result.MatchValue)
                    {
                        case "reason":
                            <span class="text-white font-weight-lighter">@(ViewBag.Authorized ? !string.IsNullOrEmpty(Model.ActivePenalty.AutomatedOffense) && Model.ActivePenalty.Type != EFPenalty.PenaltyType.Warning ? Utilities.FormatExt(ViewBag.Localization["WEBFRONT_PROFILE_ANTICHEAT_DETECTION"], Model.ActivePenalty.AutomatedOffense) : Model.ActivePenalty.Offense.StripColors() : Model.ActivePenalty.Offense.StripColors())</span>
                            break;
                        case "time":
                            <span class="text-white font-weight-lighter">
                                @((Model.ActivePenalty.Expires.Value - DateTime.UtcNow).HumanizeForCurrentCulture())
                            </span>
                            break;
                        default:
                            <span>@result.MatchValue</span>
                            break;
                    }
                }
            </div>
        }
        else
        {
            if (!ViewBag.Authorized && ViewBag.EnablePrivilegedUserPrivacy)
            {
                <div id="profile_level" class="font-weight-bold h4 mb-0 level-color-0">
                    @ViewBag.Localization["GLOBAL_PERMISSION_USER"]
                </div>
            }

            else
            {
                <div id="profile_level" class="font-weight-bold h4 mb-0 level-color-@Model.LevelInt">
                    @Model.Level
                </div>
            }
        }
    </div>

    <div class="pr-lg-0 text-center text-lg-right">
        @if (ViewBag.Authorized)
        {
            @if (!isPermBanned)
            {
                <div class="profile-action oi oi-flag h3 ml-2 @(isFlagged ? "text-secondary" : "text-success")" data-action="@(isFlagged ? "unflag" : "flag")" aria-hidden="true"></div>
            }

            @if (Model.LevelInt < (int)ViewBag.User.Level && !Model.HasActivePenalty)
            {
                <div id="profile_action_ban_btn" class="profile-action oi oi-lock-unlocked text-success h3 ml-2" title="Ban Client" data-action="ban" aria-hidden="true"></div>
            }

            @if (Model.LevelInt < (int)ViewBag.User.Level && Model.HasActivePenalty)
            {
                @if (isTempBanned)
                {
                    <div id="profile_action_ban_btn" class="profile-action oi oi-lock-unlocked text-success h3 ml-2" title="Ban Client" data-action="ban" aria-hidden="true"></div>
                    <div id="profile_action_unban_btn" class="profile-action oi oi-lock-locked penalties-color-tempban h3 ml-2" title="Unban Client" data-action="unban" aria-hidden="true"></div>
                }
                else
                {
                    <div id="profile_action_unban_btn" class="profile-action oi oi-lock-locked text-danger h3 ml-2" title="Unban Client" data-action="unban" aria-hidden="true"></div>
                }
            }


            @if (Model.LevelInt != -1)
            {
                <div id="profile_action_edit_btn" class="profile-action oi oi-cog text-muted h3 ml-2" title="Client Options" data-action="edit" aria-hidden="true"></div>
            }
        }
        @if (ViewBag.UseNewStats)
        {
            <a asp-controller="ClientStatistics" asp-action="Advanced" asp-route-id="@Model.ClientId" class="oi oi-graph text-primary h3 ml-2" title="Stats" aria-hidden="true"></a>
        }
    </div>
</div>

<div id="profile_info" class="row d-block d-lg-flex flex-row border-bottom border-top pt-2 pb-2">
    <partial name="Meta/_Information.cshtml" model="@Model.Meta"/>
</div>

<div class="row border-bottom">
    <div class="d-md-flex flex-fill">
        <div class="bg-dark p-2 pl-3 pr-3 text-center text-muted border-0 align-self-stretch align-middle" id="filter_meta_container_button">
            <span class="text-primary" id="meta_filter_dropdown_icon">▼</span>
            <a>@ViewBag.Localization["WEBFRONT_CLIENT_META_FILTER"]</a>
        </div>
        <div id="filter_meta_container" class="d-none d-md-flex flex-md-fill flex-md-wrap">
            @{
                const int defaultTabCount = 5;
                var metaTypes = Enum.GetValues(typeof(MetaType))
                   .Cast<MetaType>()
                   .Where(type => !ignoredMetaTypes.Contains(type))
                   .OrderByDescending(type => type == MetaType.All)
                   .ToList();
                var selectedMeta = metaTypes.FirstOrDefault(meta => metaTypes.IndexOf(Model.MetaFilterType ?? MetaType.All) >= defaultTabCount && meta != MetaType.All && meta == Model.MetaFilterType);
            }
            @foreach (var type in metaTypes.Take(defaultTabCount - 1).Append(selectedMeta == MetaType.Other ? metaTypes[defaultTabCount - 1] : selectedMeta))
            {
                <a asp-action="ProfileAsync" asp-controller="Client"
                   class="meta-filter nav-link p-2 pl-3 pr-3 text-center @(Model.MetaFilterType.HasValue && Model.MetaFilterType.Value.ToString() == type.ToString() ? "btn-primary text-white" : "text-muted")"
                   asp-route-id="@Model.ClientId"
                   asp-route-metaFilterType="@type"
                   data-meta-type="@type">
                    @type.ToTranslatedName()
                </a>
            }
            <div class="d-md-none" id="additional_meta_filter">
                @foreach (var type in (selectedMeta == MetaType.Other ? metaTypes.Skip(defaultTabCount) : metaTypes.Skip(defaultTabCount).Append(metaTypes[defaultTabCount - 1])).Where(meta => selectedMeta == MetaType.Other || meta != selectedMeta))
                {
                    <a asp-action="ProfileAsync" asp-controller="Client"
                       class="meta-filter nav-link p-2 pl-3 pr-3 text-center @(Model.MetaFilterType.HasValue && Model.MetaFilterType.Value.ToString() == type.ToString() ? "btn-primary text-white" : "text-muted")"
                       asp-route-id="@Model.ClientId"
                       asp-route-metaFilterType="@type"
                       data-meta-type="@type">
                        @type.ToTranslatedName()
                    </a>
                }
            </div>
        </div>
    </div>
</div>

@if ((!ViewBag.Authorized && !ViewBag.EnablePrivilegedUserPrivacy) || ViewBag.Authorized)
{
    <div class="row d-md-flex pt-2">
        <div id="profile_events" class="text-muted text-left pl-4 pr-4 pl-md-0 pr-md-0">
            @await Component.InvokeAsync("ProfileMetaList", new { clientId = Model.ClientId, count = 30, offset = 0, startAt = DateTime.UtcNow, metaType = Model.MetaFilterType })
        </div>
    </div>
}

<div class="row">
    <div class="oi oi-chevron-bottom text-center mt-2 btn btn-primary btn-block loader-load-more" title="Load more meta" data-action="unban" aria-hidden="true"></div>
</div>

@section targetid {
    <input type="hidden" name="targetId" value="@Model.ClientId"/>
}

@section scripts {
    <environment include="Development">
        <script type="text/javascript" src="~/js/loader.js"></script>
        <script type="text/javascript" src="~/js/profile.js"></script>
    </environment>
    <script>initLoader('/Client/Meta/@Model.ClientId', '#profile_events', 30, 30, [{ 'name': 'metaFilterType', 'value': '@Model.MetaFilterType' }]);</script>
}
